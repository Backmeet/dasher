DASHER - a assmbley like lauguage for D.A.S.H


1. var
    a. new
        • Syntax: var, new, <name>, <value>
        • <name>: The identifier for the new variable.
        • <value>: The initial numeric value for the variable (provided in decimal; it will be converted to a 16‑bit binary number).
        • Purpose: Creates a new variable.
        • What it does: Allocates a new 16‑bit address for the variable and sets its initial value.

    b. remove
        • Syntax: var, remove, <name>
            -> <name>: The identifier of the variable to delete.
        • Purpose: Deletes a variable.
        • What it does: Frees the variable’s allocated address using the deallocate function and logs a deallocation message (no direct machine code is generated).

    c. set
        • Syntax: var, set, <name>, <immediate_value>
            -> <name>: The identifier of an existing variable.
            -> <immediate_value>: A literal number to assign to the variable (converted to a 16‑bit binary number).
        • Purpose: Sets a variable to an immediate (literal) value.
        • What it does: Verifies the variable exists, then generates instructions to load its address and the immediate value.

    d. copy
        • Syntax: var, copy, <source_name>, <target_name>
            -> <target_name>: The variable that will receive the new value.
            -> <source_name>: The variable whose value will be copied.
        • Purpose: Copies the value from one variable to another.
        • What it does: Checks that both variables exist, then generates instructions to transfer the source variable’s value to the target variable.

    e. math
        • Syntax (Single-variable operations): var, math, <var>, <operator>, <destination>
        • Syntax (Two-variable operations): var, math, <var1>, <operator>, <var2>, <destination>
            -> <var>: The variable on which the operation is performed (for single-variable ops, can be literal).
            -> <operator>: The arithmetic or bitwise operator (e.g., >>>, <<<, ++, --, +, -, *, /, %, &, ~, ^, >, <, ==).
            -> <destination>: The variable where the result will be stored.
            -> <var1>: The first var (for Two-variable ops, can be literal).
            -> <var2>: The first var (for Two-variable ops, can be literal).
        • Purpose: Performs arithmetic or bitwise operations.
        • What it does:
        • For single-variable operations: Uses a temporary variable for intermediate storage, then performs the operation and stores the result.
        • For two-variable operations: Loads the operands, uses a predefined mapping (opreationToBin) to convert the operator to a binary opcode, and stores the result.

2. draw
    • Purpose: Likely used for rendering or displaying data.
    • What it does: Generates instructions to perform a drawing operation using values from two variables.
    • Syntax: draw, <arg1>, <arg2>
        -> <arg1>: var name for the 4 bit x or y
        -> <arg2>: var name for 8 bit value
        

3. rnd
    • Purpose: Generates a random number.
    • What it does: Assigns a random binary number to a variable.
    • Syntax: rnd, <var>
        -> <var>: The variable that will receive the random number.

4. http
    a. get
        • Syntax: http, get, <var>
            -> <var>: The variable where the GET request result is stored.
        • Purpose: Performs an HTTP GET request.
        • What it does: Verifies the variable exists and generates an instruction to execute the GET request and store its result.

    b. post
        • Syntax: http, post, <data_var>, <response_var>
            -> <data_var>: The variable containing data to send.
            -> <response_var>: The variable to store the HTTP response.
        • Purpose: Performs an HTTP POST request.
        • What it does: Checks both variables exist and generates instructions to post data and handle the response.

5. io
    a. get
        • Purpose: Manages input/output operations.
        • What it does: Generates instructions for I/O operations on a specified port using a variable’s value.
        • Syntax: io, <var>, <port>
            -> <var>: The variable involved in the I/O operation.
            -> <port>: A port number (must be between 1 and 4).

    b. set
        • Syntax: io, set, <var>, <port>
            -> <var>: The variable containing data to set.
            -> <port> the port to set the data to (must be between 1 and 4).
        • Purpose: Performs an Io set.
        • What it does: Checks both variables exist and generates instructions to set data and handle the registor.

6. exec
    • Purpose: Executes raw binary code.
    • What it does: Inserts provided binary code directly into the machine code instruction stream if it matches the expected format.
    • Syntax: exec, <binary_code>
        -> <binary_code>: A string representing binary code in the expected format (e.g., a combination of 8 to 16 binary digits, a space, and 4 binary digits).

7. while
    • Purpose: loop with var as expression
    • What it does: it takes in a expression for any var and jumps to the end of the block's line if true (should be place after the code block)
    • Syntax: while, startOfBlockLine, <var>
        -> <var>: var to be checked like a boolen  
        -> startOfBlockLine: loop's code block start line 

8. if
    • Purpose: Jump with var as expression
    • What it does: it takes in a expression for any math opreation and jumps to the line if true (should be place before the code block)
    • Syntax: if, EndOfBlockLine, <var>
        -> <var>: var to be checked like a boolen  
        -> EndOfBlockLine: line at which the code block for the if ends 

11. forever
    • Purpose: loops forever 
    • What it does: jumps to the start of the block's line forever (should be place after the code block)
    • Syntax: forever, startOfBlockLine
        -> startOfBlockLine: loop's code block start line 

13. jump 
    • Purpose: jump to a line
    • What it does: just jumps
    • Syntax: jump, line
        -> Line: line to jump to 

14. def
    • Purpose: store the curret line + 1 as a start of a function
    • What it does: just stores to a dict of function name : line
    • Syntax: def, name
        -> name: name to store  

15. call
    • Purpose: jump to a line of the function name
    • What it does: just jumps to a fucntion
    • Syntax: call, name
       -> name: name to jump

16. return
    • Purpose: jump to the prvious "function"/main
    • What it does: just jumps to the privious fucntion
    • Syntax: return


14. log
    • Purpose: logs the value of a variable, likely for debugging.
    • What it does: Generates an instruction that sends the variable’s value to an output reg.
    • Syntax: log, <var>
        -> <var>: The variable whose value is to be output.

15. hlt
    • Purpose: halts the cpu
    • What it does: Generates an instruction that halts the cpu.
    • Syntax: hlt
